Istruzioni
In ciascuno dei seguenti esercizi, si richiede di analizzare un piccolo programma C.

A.	Per prima cosa, si deve fare l'analisi statica del programma, in modo analogo
	a quanto viene fatto durante la traduzione da parte di una implementazione
	che segue le regole di C Standard limitandosi a fare i controlli minimi prescritti
	da C Standard
⁃		Per ogni violazione di una regola sintattica o di un constraint, si descriva 
		quale regola viene violata
⁃		poi si rimuova l'istruzione o la dichiarazione che contiene la violazione della 
		regola, e si continui l'analisi
B.	Successivamente, si deve fare l'analisi dinamica del programma ottenuto a seguito 
	delle rimozioni operate durante l'analisi statica. Per ogni costrutto si
	descriva cosa accade quando lo si esegue.
⁃		Per ogni operatore che genera un side-effect
⁃			se il side effect genera un undefined behavior, individuarlo e 
			spiegarne la causa, successivamente si rimuova l'istruzione o la 
			dichiarazione che contiene il side effect, e si continui l'analisi 
			come se tale istruzione o dichiarazione non fosse mai stata nel 
			programma
⁃			altrimenti, descrivere in che modo il side-effect modifica la memoria, 
			indicando qual'è la variabile modificata e il nuovo valore che 
			essa assume (in caso di portable behavior) oppure quali sono i 
			possibili nuovi valori che, in base a C Standard essa potrebbe 
			assumere (in caso di non-portable behavior)
⁃		Se ci sono ulteriori undefined behavior (oltre quelli causati dagli operatori 
		con side-effect), individuarli e spiegare da cosa essi vengono causati; 
		successivamente si rimuova l'istruzione o la dichiarazione che contiene 
		il side effect, e si continui l'analisi come se tale istruzione o 
		dichiarazione non fosse mai stata nel programma


_______________________________________________________________________________________

Programma 1

1.	int x = -1, y = 3, z = -5;
2.	
3.	
4.	int main( void ) {
5.	
6.	z = x++ * 3 - ( x = 6 ) ;
7.	
8.	return 0; 
9.	}

Analisi statica
	Tutto ok

Analisi dinamica
	Riga 1: x assume -1, y assume 3, z assume -5
	Riga 6: Undefined Behavior (Regola Un-D-Se): le due operazioni che manipolano x
			non sono vincolate ad essere eseguite l'una prima dell'altra
	Riga 7: Ritorna 0
_______________________________________________________________________________________

Programma 2

1.	int x = 12, y = 3, z;
2.	
3.	int g( int p ) {
4.	
5.	    y = p + x;
6.	    return 2 * y;
7.	
8.	}
9.	
10.	
11.	int main( void ) {
12.	
13.	    z = 5 + g( ( x -= 4 ) / 3 );
14.	
15.	    return 0; 
16.	}

Analisi statica
	Tutto ok

Analisi dinamica
	Riga 1: x assume 12, y assume 3, z assume 0
	Riga 13: Regola Comp_SE_F1, x assume 8, viene invocata g(2)
	Riga 5: y assume 10
	Riga 6: g ritorna 20
	Riga 13: z assume 25
_______________________________________________________________________________________

Programma 3

1.	int x, y = 3, z = -5;
2.	
3.	int main( void ) {
4.	
5.	    x = ++y + ( z *= 3 );
6.	    x += 7;
7.	
8.	    return 0; 
9.	}

Analisi statica
	Tutto ok

Analisi dinamica
	Riga 1: x assume 0, y assume 3, z assume -5
	Riga 5: Portable Unspecified Behavior: il compilatore potrebbe eserguire prima
			++y o z *= 3, ma ad x viene sempre assegnato -11
	Riga 8: Ritorna 0
_______________________________________________________________________________________

Programma 4

1.	int x = -1, y = 3, z;
2.	
3.	int h( int p ) {
4.	
5.	    p = ( p + y ) / 2;
6.	    x = p * y;
7.	    return p;
8.	
9.	}
10.	
11.	
12.	int main( void ) {
13.	
14.	    z = h( 14 ) - ( x + 2 );
15.	
16.	    return 0; 
17.	}

Analisi statica
	Tutto ok

Analisi dinamica
	Riga 1: x assume -1, y assume 3, z assume 0
	Riga 14: Non-Portable Unspecified Behavior: 2 casi: viene eseguita prima 
			 h(14) oppure (x + 2)

			 CASO 1 --> Viene eseguita prima h(14):
			 	Riga 5: p = 8
			 	Riga 6: x = 24
			 	Riga 7: Ritorna 8
			 	Riga 14: z = 18
			 CASO 2 --> Viene eseguito prima (x + 2)
			 	Riga 14: z = h(14) - 1
			 	Riga 5: p = 8
			 	Riga 6: x = 24
			 	Riga 7: Ritorna 8
			 	Riga 14: z = 7
_______________________________________________________________________________________

Programma 5

1.	int x = -1, y = 3, z = -5;
2.	
3.	
4.	int main( void ) {
5.	
6.	    z = x * 3 - ( x = 6 ) ;
7.	
8.	    return 0; 
9.	}

Analisi statica
	Tutto ok

Analisi dinamica
	Riga 1: x assume -1, y assume 3, z assume -5
	Riga 6: Undefined Behavior (Regola Un-D-Se): le due operazioni che manipolano x
			non sono vincolate ad essere eseguite interamente l'una prima dell'altra
_______________________________________________________________________________________

Programma 6

1.	int x = -1, y = 3, z = -5;
2.	
3.	int f( int p ) {
4.	
5.	    return 2 * ( x *= p ) - y;
6.	
7.	}
8.	
9.	
10.	int main( void ) {
11.	
12.	    z = ( x -= 13 ) - f( 6 ) ;
13.	
14.	    return 0; 
15.	}

Analisi statica
	Tutto ok

Analisi dinamica
	Riga 1: x assume -1, y assume 3, z assume -5
	Riga 12: Non-Portable Unspecified Behavior: 2 casi: viene eseguita prima
			 (x -= 13) oppure f(6)

			 CASO 1 --> Viene eseguita prima (x -= 13):
			 	Riga 12: z = -14 - f(6), x = -14
			 	Riga 5: Ritorna -171, x = -84
			 	Riga 12: z = 157
			 CASO 2 --> Viene eseguita prima f(6)
			 	Riga 5: Ritorna -15, x = -6
			 	Riga 12: x = -14, z = 1
_______________________________________________________________________________________

Programma 7

1.	int x = 8, y = 3, z;
2.	float f = 8.5f, g = 3.0f, h;
3.	
4.	int main( void ) {
5.	    z = x % y;
6.	    h = f % g;
7.	    z = ( 4 * y - 2 ) / ( y = x + 1 );
8.	    x = -7 * y-- ;
9.	    return 0;
10.	}

Analisi statica
	Riga 6: Cnstraint Violation: I due operandi nell'operazione di resto devono
			essere di tipo int

Analisi dinamica
	Riga 1: x assume 8, y assume 3, z assume 0
	Riga 2: f assume 8.5, g assume 3.0, h assume 0.0
	Riga 5: z = 2
	Riga 7: Undefined Behavior (Regola Un-D-Se): le due operazioni che manipolano y
			non sono vincolate ad essere eseguite interamente l'una prima dell'altra
	Riga 8: y = 2, x = -14
_______________________________________________________________________________________

Programma 8

1.	int x = 9, y = 3, z;
2.	
3.	int f( int p ) {
4.	
5.	    y += ( p - x );
6.	    return 3 * ( p + 8 );
7.	
8.	}
9.	
10.	
11.	int main( void ) {
12.	
13.	    z = f( 13 ) - ( x *= 6 );
14.	
15.	    return 0; 
16.	}

[...]
_______________________________________________________________________________________
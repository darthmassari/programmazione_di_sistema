Esercizio E (8 punti)
Si scriva un programma C99 con le seguenti caratteristiche:
  . definisce un tipo aggregato T formato da due membri di tipo char di nome c1 e c2, un
    membro di tipo long di nome x e un membro di tipo int di nome y (l'ordine dei membri può
    essere scelto come rivuole ,per facilitare la traduzione in ASM)
  . definisce un array a di lunghezza 10 di elementi di tipo T
  . esegue un ciclo in cui chiede all'utente di inserire i dati da memorizzare in a
  . ordina a in base ai valori crescenti dei membri c1 degli elementi (ovvero un elemento h viene
    considerato minore di un elemento k se e solo se il membro c1 di h è minore del membro c1
    di k)
  . stampa, uno alla volta, gli elementi di a

Per ordinare a, il programma il seguente algoritmo (chiamato Insertion Sort)
  . Per j che va da 2 a 10, ripeti:
    - key assume a[ j ]
    - i assume j - 1
    - mentre i > 0 e a[ i ] > key, ripeti:
      - a[ i + 1 ] assume a[ i ]
      - i assume i - 1
    - a[ i + 1 ]assume key


Dopo aver scritto il programma C99, lo si traduca in MIPS32-MARS e in MC68000. 
Per la versione MIPS32-MARS, usare
    il formato byte per rappresentare il tipo char
    il formato half per rappresentare il tipo int
    il formato word per rappresentare il tipo long
Per la versione MC68000-ASM1, usare
    il formato byte per rappresentare il tipo char
    il formato word per rappresentare il tipo int
    il formato long per rappresentare il tipo long

Nel rappresentare il tipo aggregato T, si presti attenzione ai vincoli di allineamento: per evitare
problemi si consiglia di scegliere in modo opportuno l'ordine dei membri all'interno dell'area di
memoria che rappresenta un valore di T.
Entrambe le versioni assembly, per effettuare input/output usare delle parole magiche, ovvero delle
parole di memoria speciali, accedendo alle quali l'hardware effettua operazioni input/output. In
particolare:
  - l'input di un carattere avviene leggendo il contenuto della parola di8bit che ha indirizzo
     0x6000
  - l'output di un carattere avviene scrivendo il carattere nella parola di8bit che ha indirizzo
     0x6001
  - l'input di un intero di 16 cifre binarie avviene leggendo il contenuto della parola di 16 bit che
     ha indirizzo 0x7000
  - l'output di un intero di 16 cifre binarie avviene scrivendolo nella parola di 16 bit che ha
     indirizzo 0x7002
  - l'input di un intero di 32 cifre binarie avviene leggendo il contenuto della parola di 32 bit che
     ha indirizzo 0x8000
  - l'output di un intero di 32 cifre binarie avviene scrivendolo nella parola di 32 bit che ha
    indirizzo 0x8004
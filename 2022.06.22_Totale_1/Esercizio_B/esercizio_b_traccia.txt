Esercizio B (3 punti)
Facendo riferimento ai numeri di riga (che non fanno parte del codice sorgente),si descriva cosa accade
traducendo ed eseguendo il programma seguente con una abstract machine C99. In particolare si descriva
quali valori vengono assunti dalle variabili durante l'esecuzione del programma. Potrebbe accadere che il
programma contenga degli errori. Per ogni violazione di regola sintattica o constraint presente nel
programma,si scriva qual'è la regola violata e poi si rimuova l'istruzione o la dichiarazione che la
contiene e si continui a tradurre ed eseguire il programma (come se l'istruzione o dichiarazione rimossa non
fosse mai esistita). Allo stesso modo, per ogni undefined behavior presente nel programma, si scriva qual'è il
motivo del comportamento e poi si rimuova l'istruzione o la dichiarazione che lo contiene e si continui a
tradurre ed eseguire il programma (come se l'istruzione o dichiarazione rimossa non fosse mai esistita). Ogni
volta che,a causa di un unspecified behavior o di un implementation-defined behavior,è possibile che il
programma abbia risultati diversi su implementazioni diverse, si spieghi il motivo.


1. #include <stdio.h>
2. int k = 77, h = 99;
3. int fl( int k ) {
4.     int w = k - 1;
5.     printf("%d %d %d\n", w, k, h );
6.     f2();
7.     for ( int i = 0, h = 7; i < k; i++ ) {
8.         static int k = 3;
9.         int h = 7;
10.        printf("%d %d %d\n", w, k, h);
11.        w *= 2; k *= 2; h *= 2;
12.     }
13.     w++, k++, h++;
14.     printf("%d %d %d\n", w, k, h);
15.     return w;
16. }
17. 
18. void f2( void ) {
19.     k++;
20.     printf("%d\n", k);
21. }
22. 
23. int main( void ) {
24.     int t = 2, k = 4;
25. 
26.     fl( --k );
27.     f2();
28.     t = f1( t );
29.     t = f2();
30.     return 0;
31. }
32. 

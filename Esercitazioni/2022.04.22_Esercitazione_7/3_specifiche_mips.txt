Come descritto nella presentazione Interpretazione dei 
Dati nei Linguaggi Assembly, MIPS32 ha istruzioni 
aritmetiche che in caso di overflow generano delle 
eccezioni, e istruzioni aritmetiche che invece non 
segnalano eventuali overflow. Per risolvere il 
presente esercizio, si deve tenere conto di questo 
fatto. Ulteriori informazioni in merito sono 
disponibili nella documentazione di MARS (compresi gli 
aiuti per il completamento delle istruzioni presenti 
all'interno di MARS stesso) e nella documentazione 
ufficiale MIPS32. Si scrivano dei frammenti di codice 
ASM MIPS32-MARS (2-3 istruzioni ciascuno), in base 
alle seguenti specifiche

(I) Specifica 3.1
SE usando l'interpretazione unsigned, 
il contenuto della parola di formato word di t6 è 
UGUALE al valore 0, 
	ALLORA poni il valore 1 nella 
	parola di formato word di s7 
	ALTRIMENTI poni il valore 
	0 nella parola di formato word di s7
SE usando l'interpretazione unsigned, 
il contenuto della parola di formato word
di t6 è MAGGIORE del valore 0, 
	ALLORA salta a label1 

seq $s7,$t6,0			#seq: se t6 = 0, metto 1 in s7, altrimenti
				#ci mette 0
bgtu $t6,0, label1

(IV) Specifica 3.4
Usando l'interpretazione unsigned, esegui una somma che non segnala 
un eventuale overflow tra il contenuto della parola di formato word 
di t3 e quello di t4, memorizzando il risultato nella parola di 
formato word di t5

SE usando l'interpretazione signed, il contenuto 
della parola di formato word di t5 è MINORE O UGUALE del contenuto 
della parola di formato word di t2, 
	ALLORA salta a label2

addu $t5,$t3,$t4		#addu fa la somma unsigned senza considerare
				#eventuali overflow
ble $t5,$t2, label2